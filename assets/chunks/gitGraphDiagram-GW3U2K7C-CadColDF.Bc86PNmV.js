import{t as Q}from"./chunk-353BL4L5-B7HBeUXM.CSNCbZN7.js";import{e as X}from"./chunk-AACKK3MU-Cryp-fjz.8U_FmSiE.js";import{p as h,n as Z,m as tt,c as rt,d as et,e as ot,f as at,F as u,u as nt,g as ct,i as it,L as st,D as dt,K as k,M as ht,S as mt,T as $t,U as yt}from"./theme.BWRB6Uio.js";import{S as lt}from"./treemap-75Q7IDZK-D3jYUceT.BRdDGdNv.js";import"./framework.B4DAyMYG.js";import"./baseUniq-BnBDe434.DbrzI20_.js";import"./basePickBy-e1_LFE0l.BXIfG2b6.js";import"./clone-C69uDLV8.B3nFcjMQ.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},gt=$t.gitGraph,G=h(()=>ht({...gt,...mt().gitGraph}),"getConfig"),s=new X(()=>{const r=G(),t=r.mainBranchName,o=r.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:o}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function S(){return yt({length:7})}h(S,"getID");function _(r,t){const o=Object.create(null);return r.reduce((n,e)=>{const a=t(e);return o[a]||(o[a]=!0,n.push(e)),n},[])}h(_,"uniqBy");var pt=h(function(r){s.records.direction=r},"setDirection"),ft=h(function(r){u.debug("options str",r),r=r==null?void 0:r.trim(),r=r||"{}";try{s.records.options=JSON.parse(r)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),xt=h(function(){return s.records.options},"getOptions"),ut=h(function(r){let t=r.msg,o=r.id;const n=r.type;let e=r.tags;u.info("commit",t,o,n,e),u.debug("Entering commit:",t,o,n,e);const a=G();o=k.sanitizeText(o,a),t=k.sanitizeText(t,a),e=e==null?void 0:e.map(c=>k.sanitizeText(c,a));const i={id:o||s.records.seq+"-"+S(),message:t,seq:s.records.seq++,type:n??p.NORMAL,tags:e??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=i,u.info("main branch",a.mainBranchName),s.records.commits.has(i.id)&&u.warn(`Commit ID ${i.id} already exists`),s.records.commits.set(i.id,i),s.records.branches.set(s.records.currBranch,i.id),u.debug("in pushCommit "+i.id)},"commit"),bt=h(function(r){let t=r.name;const o=r.order;if(t=k.sanitizeText(t,G()),s.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);s.records.branches.set(t,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(t,{name:t,order:o}),K(t),u.debug("in createBranch")},"branch"),wt=h(r=>{let t=r.branch,o=r.id;const n=r.type,e=r.tags,a=G();t=k.sanitizeText(t,a),o&&(o=k.sanitizeText(o,a));const i=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(t),m=i?s.records.commits.get(i):void 0,y=c?s.records.commits.get(c):void 0;if(m&&y&&m.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(s.records.currBranch===t){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(m===void 0||!m){const d=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},d}if(!s.records.branches.has(t)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},d}if(y===void 0||!y){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},d}if(m===y){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(o&&s.records.commits.has(o)){const d=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw d.hash={text:`merge ${t} ${o} ${n} ${e==null?void 0:e.join(" ")}`,token:`merge ${t} ${o} ${n} ${e==null?void 0:e.join(" ")}`,expected:[`merge ${t} ${o}_UNIQUE ${n} ${e==null?void 0:e.join(" ")}`]},d}const $=c||"",l={id:o||`${s.records.seq}-${S()}`,message:`merged branch ${t} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,$],branch:s.records.currBranch,type:p.MERGE,customType:n,customId:!!o,tags:e??[]};s.records.head=l,s.records.commits.set(l.id,l),s.records.branches.set(s.records.currBranch,l.id),u.debug(s.records.branches),u.debug("in mergeBranch")},"merge"),Bt=h(function(r){let t=r.id,o=r.targetId,n=r.tags,e=r.parent;u.debug("Entering cherryPick:",t,o,n);const a=G();if(t=k.sanitizeText(t,a),o=k.sanitizeText(o,a),n=n==null?void 0:n.map(m=>k.sanitizeText(m,a)),e=k.sanitizeText(e,a),!t||!s.records.commits.has(t)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},m}const i=s.records.commits.get(t);if(i===void 0||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(i.parents)&&i.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=i.branch;if(i.type===p.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!s.records.commits.has(o)){if(c===s.records.currBranch){const l=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw l.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},l}const m=s.records.branches.get(s.records.currBranch);if(m===void 0||!m){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},l}const y=s.records.commits.get(m);if(y===void 0||!y){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},l}const $={id:s.records.seq+"-"+S(),message:`cherry-picked ${i==null?void 0:i.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,i.id],branch:s.records.currBranch,type:p.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${i.id}${i.type===p.MERGE?`|parent:${e}`:""}`]};s.records.head=$,s.records.commits.set($.id,$),s.records.branches.set(s.records.currBranch,$.id),u.debug(s.records.branches),u.debug("in cherryPick")}},"cherryPick"),K=h(function(r){if(r=k.sanitizeText(r,G()),s.records.branches.has(r)){s.records.currBranch=r;const t=s.records.branches.get(s.records.currBranch);t===void 0||!t?s.records.head=null:s.records.head=s.records.commits.get(t)??null}else{const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw t.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},t}},"checkout");function N(r,t,o){const n=r.indexOf(t);n===-1?r.push(o):r.splice(n,1,o)}h(N,"upsert");function W(r){const t=r.reduce((e,a)=>e.seq>a.seq?e:a,r[0]);let o="";r.forEach(function(e){e===t?o+="	*":o+="	|"});const n=[o,t.id,t.seq];for(const e in s.records.branches)s.records.branches.get(e)===t.id&&n.push(e);if(u.debug(n.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){const e=s.records.commits.get(t.parents[0]);N(r,t,e),t.parents[1]&&r.push(s.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){const e=s.records.commits.get(t.parents[0]);N(r,t,e)}}r=_(r,e=>e.id),W(r)}h(W,"prettyPrintCommitHistory");var Et=h(function(){u.debug(s.records.commits);const r=Y()[0];W([r])},"prettyPrint"),Ct=h(function(){s.reset(),dt()},"clear"),kt=h(function(){return[...s.records.branchConfig.values()].map((r,t)=>r.order!==null&&r.order!==void 0?r:{...r,order:parseFloat(`0.${t}`)}).sort((r,t)=>(r.order??0)-(t.order??0)).map(({name:r})=>({name:r}))},"getBranchesAsObjArray"),Lt=h(function(){return s.records.branches},"getBranches"),Tt=h(function(){return s.records.commits},"getCommits"),Y=h(function(){const r=[...s.records.commits.values()];return r.forEach(function(t){u.debug(t.id)}),r.sort((t,o)=>t.seq-o.seq),r},"getCommitsArray"),Mt=h(function(){return s.records.currBranch},"getCurrentBranch"),vt=h(function(){return s.records.direction},"getDirection"),Pt=h(function(){return s.records.head},"getHead"),U={commitType:p,getConfig:G,setDirection:pt,setOptions:ft,getOptions:xt,commit:ut,branch:bt,merge:wt,cherryPick:Bt,checkout:K,prettyPrint:Et,clear:Ct,getBranchesAsObjArray:kt,getBranches:Lt,getCommits:Tt,getCommitsArray:Y,getCurrentBranch:Mt,getDirection:vt,getHead:Pt,setAccTitle:at,getAccTitle:ot,getAccDescription:et,setAccDescription:rt,setDiagramTitle:tt,getDiagramTitle:Z},Rt=h((r,t)=>{Q(r,t),r.dir&&t.setDirection(r.dir);for(const o of r.statements)It(o,t)},"populate"),It=h((r,t)=>{const o={Commit:h(n=>t.commit(At(n)),"Commit"),Branch:h(n=>t.branch(Gt(n)),"Branch"),Merge:h(n=>t.merge(Ot(n)),"Merge"),Checkout:h(n=>t.checkout(qt(n)),"Checkout"),CherryPicking:h(n=>t.cherryPick(Ht(n)),"CherryPicking")}[r.$type];o?o(r):u.error(`Unknown statement type: ${r.$type}`)},"parseStatement"),At=h(r=>({id:r.id,msg:r.message??"",type:r.type!==void 0?p[r.type]:p.NORMAL,tags:r.tags??void 0}),"parseCommit"),Gt=h(r=>({name:r.name,order:r.order??0}),"parseBranch"),Ot=h(r=>({branch:r.branch,id:r.id??"",type:r.type!==void 0?p[r.type]:void 0,tags:r.tags??void 0}),"parseMerge"),qt=h(r=>r.branch,"parseCheckout"),Ht=h(r=>{var t;return{id:r.id,targetId:"",tags:((t=r.tags)==null?void 0:t.length)===0?void 0:r.tags,parent:r.parent}},"parseCherryPicking"),zt={parse:h(async r=>{const t=await lt("gitGraph",r);u.debug(t),Rt(t,U)},"parse")},D=nt(),x=D==null?void 0:D.gitGraph,P=10,R=40,L=4,T=2,A=8,E=new Map,C=new Map,H=30,O=new Map,z=[],v=0,g="LR",St=h(()=>{E.clear(),C.clear(),O.clear(),v=0,z=[],g="LR"},"clear"),V=h(r=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof r=="string"?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),t.appendChild(n)}),t},"drawText"),J=h(r=>{let t,o,n;return g==="BT"?(o=h((e,a)=>e<=a,"comparisonFunc"),n=1/0):(o=h((e,a)=>e>=a,"comparisonFunc"),n=0),r.forEach(e=>{var i,c;const a=g==="TB"||g=="BT"?(i=C.get(e))==null?void 0:i.y:(c=C.get(e))==null?void 0:c.x;a!==void 0&&o(a,n)&&(t=e,n=a)}),t},"findClosestParent"),Dt=h(r=>{let t="",o=1/0;return r.forEach(n=>{const e=C.get(n).y;e<=o&&(t=n,o=e)}),t||void 0},"findClosestParentBT"),Nt=h((r,t,o)=>{let n=o,e=o;const a=[];r.forEach(i=>{const c=t.get(i);if(!c)throw new Error(`Commit not found for key ${i}`);c.parents.length?(n=jt(c),e=Math.max(n,e)):a.push(c),Ft(c,n)}),n=e,a.forEach(i=>{_t(i,n,o)}),r.forEach(i=>{const c=t.get(i);if(c!=null&&c.parents.length){const m=Dt(c.parents);n=C.get(m).y-R,n<=e&&(e=n);const y=E.get(c.branch).pos,$=n-P;C.set(c.id,{x:y,y:$})}})},"setParallelBTPos"),Wt=h(r=>{var n;const t=J(r.parents.filter(e=>e!==null));if(!t)throw new Error(`Closest parent not found for commit ${r.id}`);const o=(n=C.get(t))==null?void 0:n.y;if(o===void 0)throw new Error(`Closest parent position not found for commit ${r.id}`);return o},"findClosestParentPos"),jt=h(r=>Wt(r)+R,"calculateCommitPosition"),Ft=h((r,t)=>{const o=E.get(r.branch);if(!o)throw new Error(`Branch not found for commit ${r.id}`);const n=o.pos,e=t+P;return C.set(r.id,{x:n,y:e}),{x:n,y:e}},"setCommitPosition"),_t=h((r,t,o)=>{const n=E.get(r.branch);if(!n)throw new Error(`Branch not found for commit ${r.id}`);const e=t+o,a=n.pos;C.set(r.id,{x:a,y:e})},"setRootPosition"),Kt=h((r,t,o,n,e,a)=>{if(a===p.HIGHLIGHT)r.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${e%A} ${n}-outer`),r.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${e%A} ${n}-inner`);else if(a===p.CHERRY_PICK)r.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`);else{const i=r.append("circle");if(i.attr("cx",o.x),i.attr("cy",o.y),i.attr("r",t.type===p.MERGE?9:10),i.attr("class",`commit ${t.id} commit${e%A}`),a===p.MERGE){const c=r.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class",`commit ${n} ${t.id} commit${e%A}`)}a===p.REVERSE&&r.append("path").attr("d",`M ${o.x-5},${o.y-5}L${o.x+5},${o.y+5}M${o.x-5},${o.y+5}L${o.x+5},${o.y-5}`).attr("class",`commit ${n} ${t.id} commit${e%A}`)}},"drawCommitBullet"),Yt=h((r,t,o,n)=>{var e;if(t.type!==p.CHERRY_PICK&&(t.customId&&t.type===p.MERGE||t.type!==p.MERGE)&&(x!=null&&x.showCommitLabel)){const a=r.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(t.id),m=(e=c.node())==null?void 0:e.getBBox();if(m&&(i.attr("x",o.posWithOffset-m.width/2-T).attr("y",o.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),g==="TB"||g==="BT"?(i.attr("x",o.x-(m.width+4*L+5)).attr("y",o.y-12),c.attr("x",o.x-(m.width+4*L)).attr("y",o.y+m.height-12)):c.attr("x",o.posWithOffset-m.width/2),x.rotateCommitLabel))if(g==="TB"||g==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),i.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const y=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;a.attr("transform","translate("+y+", "+$+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),Ut=h((r,t,o,n)=>{var e;if(t.tags.length>0){let a=0,i=0,c=0;const m=[];for(const y of t.tags.reverse()){const $=r.insert("polygon"),l=r.append("circle"),d=r.append("text").attr("y",o.y-16-a).attr("class","tag-label").text(y),f=(e=d.node())==null?void 0:e.getBBox();if(!f)throw new Error("Tag bbox not found");i=Math.max(i,f.width),c=Math.max(c,f.height),d.attr("x",o.posWithOffset-f.width/2),m.push({tag:d,hole:l,rect:$,yOffset:a}),a+=20}for(const{tag:y,hole:$,rect:l,yOffset:d}of m){const f=c/2,b=o.y-19.2-d;if(l.attr("class","tag-label-bkg").attr("points",`
      ${n-i/2-L/2},${b+T}  
      ${n-i/2-L/2},${b-T}
      ${o.posWithOffset-i/2-L},${b-f-T}
      ${o.posWithOffset+i/2+L},${b-f-T}
      ${o.posWithOffset+i/2+L},${b+f+T}
      ${o.posWithOffset-i/2-L},${b+f+T}`),$.attr("cy",b).attr("cx",n-i/2+L/2).attr("r",1.5).attr("class","tag-hole"),g==="TB"||g==="BT"){const w=n+d;l.attr("class","tag-label-bkg").attr("points",`
        ${o.x},${w+2}
        ${o.x},${w-2}
        ${o.x+P},${w-f-2}
        ${o.x+P+i+4},${w-f-2}
        ${o.x+P+i+4},${w+f+2}
        ${o.x+P},${w+f+2}`).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("cx",o.x+L/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),y.attr("x",o.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),Vt=h(r=>{switch(r.customType??r.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Jt=h((r,t,o,n)=>{const e={x:0,y:0};if(r.parents.length>0){const a=J(r.parents);if(a){const i=n.get(a)??e;return t==="TB"?i.y+R:t==="BT"?(n.get(r.id)??e).y-R:i.x+R}}else return t==="TB"?H:t==="BT"?(n.get(r.id)??e).y-R:0;return 0},"calculatePosition"),Qt=h((r,t,o)=>{var i,c;const n=g==="BT"&&o?t:t+P,e=g==="TB"||g==="BT"?n:(i=E.get(r.branch))==null?void 0:i.pos,a=g==="TB"||g==="BT"?(c=E.get(r.branch))==null?void 0:c.pos:n;if(a===void 0||e===void 0)throw new Error(`Position were undefined for commit ${r.id}`);return{x:a,y:e,posWithOffset:n}},"getCommitPosition"),F=h((r,t,o)=>{if(!x)throw new Error("GitGraph config not found");const n=r.append("g").attr("class","commit-bullets"),e=r.append("g").attr("class","commit-labels");let a=g==="TB"||g==="BT"?H:0;const i=[...t.keys()],c=(x==null?void 0:x.parallelCommits)??!1,m=h(($,l)=>{var b,w;const d=(b=t.get($))==null?void 0:b.seq,f=(w=t.get(l))==null?void 0:w.seq;return d!==void 0&&f!==void 0?d-f:0},"sortKeys");let y=i.sort(m);g==="BT"&&(c&&Nt(y,t,a),y=y.reverse()),y.forEach($=>{var f;const l=t.get($);if(!l)throw new Error(`Commit not found for key ${$}`);c&&(a=Jt(l,g,a,C));const d=Qt(l,a,c);if(o){const b=Vt(l),w=l.customType??l.type,I=((f=E.get(l.branch))==null?void 0:f.index)??0;Kt(n,l,d,b,I,w),Yt(e,l,d,a),Ut(e,l,d,a)}g==="TB"||g==="BT"?C.set(l.id,{x:d.x,y:d.posWithOffset}):C.set(l.id,{x:d.posWithOffset,y:d.y}),a=g==="BT"&&c?a+R:a+R+P,a>v&&(v=a)})},"drawCommits"),Xt=h((r,t,o,n,e)=>{const a=(g==="TB"||g==="BT"?o.x<n.x:o.y<n.y)?t.branch:r.branch,i=h(m=>m.branch===a,"isOnBranchToGetCurve"),c=h(m=>m.seq>r.seq&&m.seq<t.seq,"isBetweenCommits");return[...e.values()].some(m=>c(m)&&i(m))},"shouldRerouteArrow"),q=h((r,t,o=0)=>{const n=r+Math.abs(r-t)/2;if(o>5)return n;if(z.every(a=>Math.abs(a-n)>=10))return z.push(n),n;const e=Math.abs(r-t);return q(r,t-e/5,o+1)},"findLane"),Zt=h((r,t,o,n)=>{var f,b,w,I,j;const e=C.get(t.id),a=C.get(o.id);if(e===void 0||a===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${o.id}`);const i=Xt(t,o,e,a,n);let c="",m="",y=0,$=0,l=(f=E.get(o.branch))==null?void 0:f.index;o.type===p.MERGE&&t.id!==o.parents[0]&&(l=(b=E.get(t.branch))==null?void 0:b.index);let d;if(i){c="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",y=10,$=10;const M=e.y<a.y?q(e.y,a.y):q(a.y,e.y),B=e.x<a.x?q(e.x,a.x):q(a.x,e.x);g==="TB"?e.x<a.x?d=`M ${e.x} ${e.y} L ${B-y} ${e.y} ${m} ${B} ${e.y+$} L ${B} ${a.y-y} ${c} ${B+$} ${a.y} L ${a.x} ${a.y}`:(l=(w=E.get(t.branch))==null?void 0:w.index,d=`M ${e.x} ${e.y} L ${B+y} ${e.y} ${c} ${B} ${e.y+$} L ${B} ${a.y-y} ${m} ${B-$} ${a.y} L ${a.x} ${a.y}`):g==="BT"?e.x<a.x?d=`M ${e.x} ${e.y} L ${B-y} ${e.y} ${c} ${B} ${e.y-$} L ${B} ${a.y+y} ${m} ${B+$} ${a.y} L ${a.x} ${a.y}`:(l=(I=E.get(t.branch))==null?void 0:I.index,d=`M ${e.x} ${e.y} L ${B+y} ${e.y} ${m} ${B} ${e.y-$} L ${B} ${a.y+y} ${c} ${B-$} ${a.y} L ${a.x} ${a.y}`):e.y<a.y?d=`M ${e.x} ${e.y} L ${e.x} ${M-y} ${c} ${e.x+$} ${M} L ${a.x-y} ${M} ${m} ${a.x} ${M+$} L ${a.x} ${a.y}`:(l=(j=E.get(t.branch))==null?void 0:j.index,d=`M ${e.x} ${e.y} L ${e.x} ${M+y} ${m} ${e.x+$} ${M} L ${a.x-y} ${M} ${c} ${a.x} ${M-$} L ${a.x} ${a.y}`)}else c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,g==="TB"?(e.x<a.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${m} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x+y} ${e.y} ${c} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x===a.x&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):g==="BT"?(e.x<a.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${c} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x===a.x&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):(e.y<a.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y>a.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y===a.y&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`));if(d===void 0)throw new Error("Line definition not found");r.append("path").attr("d",d).attr("class","arrow arrow"+l%A)},"drawArrow"),tr=h((r,t)=>{const o=r.append("g").attr("class","commit-arrows");[...t.keys()].forEach(n=>{const e=t.get(n);e.parents&&e.parents.length>0&&e.parents.forEach(a=>{Zt(o,t.get(a),e,t)})})},"drawArrows"),rr=h((r,t)=>{const o=r.append("g");t.forEach((n,e)=>{var f;const a=e%A,i=(f=E.get(n.name))==null?void 0:f.pos;if(i===void 0)throw new Error(`Position not found for branch ${n.name}`);const c=o.append("line");c.attr("x1",0),c.attr("y1",i),c.attr("x2",v),c.attr("y2",i),c.attr("class","branch branch"+a),g==="TB"?(c.attr("y1",H),c.attr("x1",i),c.attr("y2",v),c.attr("x2",i)):g==="BT"&&(c.attr("y1",v),c.attr("x1",i),c.attr("y2",H),c.attr("x2",i)),z.push(i);const m=n.name,y=V(m),$=o.insert("rect"),l=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);l.node().appendChild(y);const d=y.getBBox();$.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-((x==null?void 0:x.rotateCommitLabel)===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),l.attr("transform","translate("+(-d.width-14-((x==null?void 0:x.rotateCommitLabel)===!0?30:0))+", "+(i-d.height/2-1)+")"),g==="TB"?($.attr("x",i-d.width/2-10).attr("y",0),l.attr("transform","translate("+(i-d.width/2-5)+", 0)")):g==="BT"?($.attr("x",i-d.width/2-10).attr("y",v),l.attr("transform","translate("+(i-d.width/2-5)+", "+v+")")):$.attr("transform","translate(-19, "+(i-d.height/2)+")")})},"drawBranches"),er=h(function(r,t,o,n,e){return E.set(r,{pos:t,index:o}),t+=50+(e?40:0)+(g==="TB"||g==="BT"?n.width/2:0),t},"setBranchPosition"),or=h(function(r,t,o,n){if(St(),u.debug("in gitgraph renderer",r+`
`,"id:",t,o),!x)throw new Error("GitGraph config not found");const e=x.rotateCommitLabel??!1,a=n.db;O=a.getCommits();const i=a.getBranchesAsObjArray();g=a.getDirection();const c=ct(`[id="${t}"]`);let m=0;i.forEach((y,$)=>{var I;const l=V(y.name),d=c.append("g"),f=d.insert("g").attr("class","branchLabel"),b=f.insert("g").attr("class","label branch-label");(I=b.node())==null||I.appendChild(l);const w=l.getBBox();m=er(y.name,m,$,w,e),b.remove(),f.remove(),d.remove()}),F(c,O,!1),x.showBranches&&rr(c,i),tr(c,O),F(c,O,!0),it.insertTitle(c,"gitTitleText",x.titleTopMargin??0,a.getDiagramTitle()),st(void 0,c,x.diagramPadding,x.useMaxWidth)},"draw"),ar={draw:or},nr=h(r=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${r["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${r["git"+t]}; fill: ${r["git"+t]}; }
        .commit-highlight${t} { stroke: ${r["gitInv"+t]}; fill: ${r["gitInv"+t]}; }
        .label${t}  { fill: ${r["git"+t]}; }
        .arrow${t} { stroke: ${r["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${r.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}
  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}
  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }
  .tag-hole { fill: ${r.textColor}; }

  .commit-merge {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }
  .commit-reverse {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${r.textColor};
  }
`,"getStyles"),cr=nr,gr={parser:zt,db:U,renderer:ar,styles:cr};export{gr as diagram};
