import{t as J}from"./chunk-353BL4L5-CoZYCFcj.dUbxiBtB.js";import{e as X}from"./chunk-AACKK3MU-DhZbxcrM.MdwLPGmx.js";import{p as h,s as Z,r as rr,d as tr,e as er,g as or,j as ar,F as u,u as nr,k as cr,q as ir,z as sr,w as dr,K as L,I as hr,L as mr,T as $r,Y as yr}from"./theme.F6PnGTkS.js";import{S as lr}from"./treemap-75Q7IDZK-DR1A_s8Y.43Ox-goP.js";import"./framework.B4DAyMYG.js";import"./baseUniq-y2HM5nbD.Vs1g8xSB.js";import"./basePickBy-zvqYOuXh.BrqSNkjb.js";import"./clone-DJqr9BGE.CJYgbQh-.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},gr=$r.gitGraph,G=h(()=>hr({...gr,...mr().gitGraph}),"getConfig"),s=new X(()=>{const t=G(),r=t.mainBranchName,o=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:o}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function S(){return yr({length:7})}h(S,"getID");function K(t,r){const o=Object.create(null);return t.reduce((n,e)=>{const a=r(e);return o[a]||(o[a]=!0,n.push(e)),n},[])}h(K,"uniqBy");var pr=h(function(t){s.records.direction=t},"setDirection"),fr=h(function(t){u.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{s.records.options=JSON.parse(t)}catch(r){u.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=h(function(){return s.records.options},"getOptions"),ur=h(function(t){let r=t.msg,o=t.id;const n=t.type;let e=t.tags;u.info("commit",r,o,n,e),u.debug("Entering commit:",r,o,n,e);const a=G();o=L.sanitizeText(o,a),r=L.sanitizeText(r,a),e=e==null?void 0:e.map(c=>L.sanitizeText(c,a));const i={id:o||s.records.seq+"-"+S(),message:r,seq:s.records.seq++,type:n??p.NORMAL,tags:e??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=i,u.info("main branch",a.mainBranchName),s.records.commits.has(i.id)&&u.warn(`Commit ID ${i.id} already exists`),s.records.commits.set(i.id,i),s.records.branches.set(s.records.currBranch,i.id),u.debug("in pushCommit "+i.id)},"commit"),br=h(function(t){let r=t.name;const o=t.order;if(r=L.sanitizeText(r,G()),s.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:o}),_(r),u.debug("in createBranch")},"branch"),wr=h(t=>{let r=t.branch,o=t.id;const n=t.type,e=t.tags,a=G();r=L.sanitizeText(r,a),o&&(o=L.sanitizeText(o,a));const i=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(r),m=i?s.records.commits.get(i):void 0,y=c?s.records.commits.get(c):void 0;if(m&&y&&m.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(s.records.currBranch===r){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},d}if(m===void 0||!m){const d=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},d}if(!s.records.branches.has(r)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},d}if(y===void 0||!y){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},d}if(m===y){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},d}if(o&&s.records.commits.has(o)){const d=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw d.hash={text:`merge ${r} ${o} ${n} ${e==null?void 0:e.join(" ")}`,token:`merge ${r} ${o} ${n} ${e==null?void 0:e.join(" ")}`,expected:[`merge ${r} ${o}_UNIQUE ${n} ${e==null?void 0:e.join(" ")}`]},d}const $=c||"",l={id:o||`${s.records.seq}-${S()}`,message:`merged branch ${r} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,$],branch:s.records.currBranch,type:p.MERGE,customType:n,customId:!!o,tags:e??[]};s.records.head=l,s.records.commits.set(l.id,l),s.records.branches.set(s.records.currBranch,l.id),u.debug(s.records.branches),u.debug("in mergeBranch")},"merge"),Br=h(function(t){let r=t.id,o=t.targetId,n=t.tags,e=t.parent;u.debug("Entering cherryPick:",r,o,n);const a=G();if(r=L.sanitizeText(r,a),o=L.sanitizeText(o,a),n=n==null?void 0:n.map(m=>L.sanitizeText(m,a)),e=L.sanitizeText(e,a),!r||!s.records.commits.has(r)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},m}const i=s.records.commits.get(r);if(i===void 0||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(i.parents)&&i.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=i.branch;if(i.type===p.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!s.records.commits.has(o)){if(c===s.records.currBranch){const l=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw l.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},l}const m=s.records.branches.get(s.records.currBranch);if(m===void 0||!m){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},l}const y=s.records.commits.get(m);if(y===void 0||!y){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},l}const $={id:s.records.seq+"-"+S(),message:`cherry-picked ${i==null?void 0:i.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,i.id],branch:s.records.currBranch,type:p.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${i.id}${i.type===p.MERGE?`|parent:${e}`:""}`]};s.records.head=$,s.records.commits.set($.id,$),s.records.branches.set(s.records.currBranch,$.id),u.debug(s.records.branches),u.debug("in cherryPick")}},"cherryPick"),_=h(function(t){if(t=L.sanitizeText(t,G()),s.records.branches.has(t)){s.records.currBranch=t;const r=s.records.branches.get(s.records.currBranch);r===void 0||!r?s.records.head=null:s.records.head=s.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function N(t,r,o){const n=t.indexOf(r);n===-1?t.push(o):t.splice(n,1,o)}h(N,"upsert");function W(t){const r=t.reduce((e,a)=>e.seq>a.seq?e:a,t[0]);let o="";t.forEach(function(e){e===r?o+="	*":o+="	|"});const n=[o,r.id,r.seq];for(const e in s.records.branches)s.records.branches.get(e)===r.id&&n.push(e);if(u.debug(n.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const e=s.records.commits.get(r.parents[0]);N(t,r,e),r.parents[1]&&t.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const e=s.records.commits.get(r.parents[0]);N(t,r,e)}}t=K(t,e=>e.id),W(t)}h(W,"prettyPrintCommitHistory");var Er=h(function(){u.debug(s.records.commits);const t=Y()[0];W([t])},"prettyPrint"),kr=h(function(){s.reset(),dr()},"clear"),Lr=h(function(){return[...s.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),Cr=h(function(){return s.records.branches},"getBranches"),Tr=h(function(){return s.records.commits},"getCommits"),Y=h(function(){const t=[...s.records.commits.values()];return t.forEach(function(r){u.debug(r.id)}),t.sort((r,o)=>r.seq-o.seq),t},"getCommitsArray"),Mr=h(function(){return s.records.currBranch},"getCurrentBranch"),vr=h(function(){return s.records.direction},"getDirection"),Pr=h(function(){return s.records.head},"getHead"),U={commitType:p,getConfig:G,setDirection:pr,setOptions:fr,getOptions:xr,commit:ur,branch:br,merge:wr,cherryPick:Br,checkout:_,prettyPrint:Er,clear:kr,getBranchesAsObjArray:Lr,getBranches:Cr,getCommits:Tr,getCommitsArray:Y,getCurrentBranch:Mr,getDirection:vr,getHead:Pr,setAccTitle:ar,getAccTitle:or,getAccDescription:er,setAccDescription:tr,setDiagramTitle:rr,getDiagramTitle:Z},Rr=h((t,r)=>{J(t,r),t.dir&&r.setDirection(t.dir);for(const o of t.statements)Ir(o,r)},"populate"),Ir=h((t,r)=>{const o={Commit:h(n=>r.commit(Ar(n)),"Commit"),Branch:h(n=>r.branch(Gr(n)),"Branch"),Merge:h(n=>r.merge(Or(n)),"Merge"),Checkout:h(n=>r.checkout(qr(n)),"Checkout"),CherryPicking:h(n=>r.cherryPick(zr(n)),"CherryPicking")}[t.$type];o?o(t):u.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Ar=h(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?p[t.type]:p.NORMAL,tags:t.tags??void 0}),"parseCommit"),Gr=h(t=>({name:t.name,order:t.order??0}),"parseBranch"),Or=h(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?p[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),qr=h(t=>t.branch,"parseCheckout"),zr=h(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),Hr={parse:h(async t=>{const r=await lr("gitGraph",t);u.debug(r),Rr(r,U)},"parse")},D=nr(),x=D==null?void 0:D.gitGraph,P=10,R=40,C=4,T=2,A=8,E=new Map,k=new Map,z=30,O=new Map,H=[],v=0,g="LR",Sr=h(()=>{E.clear(),k.clear(),O.clear(),v=0,H=[],g="LR"},"clear"),V=h(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),r.appendChild(n)}),r},"drawText"),Q=h(t=>{let r,o,n;return g==="BT"?(o=h((e,a)=>e<=a,"comparisonFunc"),n=1/0):(o=h((e,a)=>e>=a,"comparisonFunc"),n=0),t.forEach(e=>{var i,c;const a=g==="TB"||g=="BT"?(i=k.get(e))==null?void 0:i.y:(c=k.get(e))==null?void 0:c.x;a!==void 0&&o(a,n)&&(r=e,n=a)}),r},"findClosestParent"),Dr=h(t=>{let r="",o=1/0;return t.forEach(n=>{const e=k.get(n).y;e<=o&&(r=n,o=e)}),r||void 0},"findClosestParentBT"),Nr=h((t,r,o)=>{let n=o,e=o;const a=[];t.forEach(i=>{const c=r.get(i);if(!c)throw new Error(`Commit not found for key ${i}`);c.parents.length?(n=jr(c),e=Math.max(n,e)):a.push(c),Fr(c,n)}),n=e,a.forEach(i=>{Kr(i,n,o)}),t.forEach(i=>{const c=r.get(i);if(c!=null&&c.parents.length){const m=Dr(c.parents);n=k.get(m).y-R,n<=e&&(e=n);const y=E.get(c.branch).pos,$=n-P;k.set(c.id,{x:y,y:$})}})},"setParallelBTPos"),Wr=h(t=>{var n;const r=Q(t.parents.filter(e=>e!==null));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const o=(n=k.get(r))==null?void 0:n.y;if(o===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return o},"findClosestParentPos"),jr=h(t=>Wr(t)+R,"calculateCommitPosition"),Fr=h((t,r)=>{const o=E.get(t.branch);if(!o)throw new Error(`Branch not found for commit ${t.id}`);const n=o.pos,e=r+P;return k.set(t.id,{x:n,y:e}),{x:n,y:e}},"setCommitPosition"),Kr=h((t,r,o)=>{const n=E.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const e=r+o,a=n.pos;k.set(t.id,{x:a,y:e})},"setRootPosition"),_r=h((t,r,o,n,e,a)=>{if(a===p.HIGHLIGHT)t.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${e%A} ${n}-outer`),t.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${e%A} ${n}-inner`);else if(a===p.CHERRY_PICK)t.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const i=t.append("circle");if(i.attr("cx",o.x),i.attr("cy",o.y),i.attr("r",r.type===p.MERGE?9:10),i.attr("class",`commit ${r.id} commit${e%A}`),a===p.MERGE){const c=t.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class",`commit ${n} ${r.id} commit${e%A}`)}a===p.REVERSE&&t.append("path").attr("d",`M ${o.x-5},${o.y-5}L${o.x+5},${o.y+5}M${o.x-5},${o.y+5}L${o.x+5},${o.y-5}`).attr("class",`commit ${n} ${r.id} commit${e%A}`)}},"drawCommitBullet"),Yr=h((t,r,o,n)=>{var e;if(r.type!==p.CHERRY_PICK&&(r.customId&&r.type===p.MERGE||r.type!==p.MERGE)&&(x!=null&&x.showCommitLabel)){const a=t.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(r.id),m=(e=c.node())==null?void 0:e.getBBox();if(m&&(i.attr("x",o.posWithOffset-m.width/2-T).attr("y",o.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),g==="TB"||g==="BT"?(i.attr("x",o.x-(m.width+4*C+5)).attr("y",o.y-12),c.attr("x",o.x-(m.width+4*C)).attr("y",o.y+m.height-12)):c.attr("x",o.posWithOffset-m.width/2),x.rotateCommitLabel))if(g==="TB"||g==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),i.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const y=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;a.attr("transform","translate("+y+", "+$+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),Ur=h((t,r,o,n)=>{var e;if(r.tags.length>0){let a=0,i=0,c=0;const m=[];for(const y of r.tags.reverse()){const $=t.insert("polygon"),l=t.append("circle"),d=t.append("text").attr("y",o.y-16-a).attr("class","tag-label").text(y),f=(e=d.node())==null?void 0:e.getBBox();if(!f)throw new Error("Tag bbox not found");i=Math.max(i,f.width),c=Math.max(c,f.height),d.attr("x",o.posWithOffset-f.width/2),m.push({tag:d,hole:l,rect:$,yOffset:a}),a+=20}for(const{tag:y,hole:$,rect:l,yOffset:d}of m){const f=c/2,b=o.y-19.2-d;if(l.attr("class","tag-label-bkg").attr("points",`
      ${n-i/2-C/2},${b+T}  
      ${n-i/2-C/2},${b-T}
      ${o.posWithOffset-i/2-C},${b-f-T}
      ${o.posWithOffset+i/2+C},${b-f-T}
      ${o.posWithOffset+i/2+C},${b+f+T}
      ${o.posWithOffset-i/2-C},${b+f+T}`),$.attr("cy",b).attr("cx",n-i/2+C/2).attr("r",1.5).attr("class","tag-hole"),g==="TB"||g==="BT"){const w=n+d;l.attr("class","tag-label-bkg").attr("points",`
        ${o.x},${w+2}
        ${o.x},${w-2}
        ${o.x+P},${w-f-2}
        ${o.x+P+i+4},${w-f-2}
        ${o.x+P+i+4},${w+f+2}
        ${o.x+P},${w+f+2}`).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("cx",o.x+C/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),y.attr("x",o.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),Vr=h(t=>{switch(t.customType??t.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Qr=h((t,r,o,n)=>{const e={x:0,y:0};if(t.parents.length>0){const a=Q(t.parents);if(a){const i=n.get(a)??e;return r==="TB"?i.y+R:r==="BT"?(n.get(t.id)??e).y-R:i.x+R}}else return r==="TB"?z:r==="BT"?(n.get(t.id)??e).y-R:0;return 0},"calculatePosition"),Jr=h((t,r,o)=>{var i,c;const n=g==="BT"&&o?r:r+P,e=g==="TB"||g==="BT"?n:(i=E.get(t.branch))==null?void 0:i.pos,a=g==="TB"||g==="BT"?(c=E.get(t.branch))==null?void 0:c.pos:n;if(a===void 0||e===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:e,posWithOffset:n}},"getCommitPosition"),F=h((t,r,o)=>{if(!x)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),e=t.append("g").attr("class","commit-labels");let a=g==="TB"||g==="BT"?z:0;const i=[...r.keys()],c=(x==null?void 0:x.parallelCommits)??!1,m=h(($,l)=>{var b,w;const d=(b=r.get($))==null?void 0:b.seq,f=(w=r.get(l))==null?void 0:w.seq;return d!==void 0&&f!==void 0?d-f:0},"sortKeys");let y=i.sort(m);g==="BT"&&(c&&Nr(y,r,a),y=y.reverse()),y.forEach($=>{var f;const l=r.get($);if(!l)throw new Error(`Commit not found for key ${$}`);c&&(a=Qr(l,g,a,k));const d=Jr(l,a,c);if(o){const b=Vr(l),w=l.customType??l.type,I=((f=E.get(l.branch))==null?void 0:f.index)??0;_r(n,l,d,b,I,w),Yr(e,l,d,a),Ur(e,l,d,a)}g==="TB"||g==="BT"?k.set(l.id,{x:d.x,y:d.posWithOffset}):k.set(l.id,{x:d.posWithOffset,y:d.y}),a=g==="BT"&&c?a+R:a+R+P,a>v&&(v=a)})},"drawCommits"),Xr=h((t,r,o,n,e)=>{const a=(g==="TB"||g==="BT"?o.x<n.x:o.y<n.y)?r.branch:t.branch,i=h(m=>m.branch===a,"isOnBranchToGetCurve"),c=h(m=>m.seq>t.seq&&m.seq<r.seq,"isBetweenCommits");return[...e.values()].some(m=>c(m)&&i(m))},"shouldRerouteArrow"),q=h((t,r,o=0)=>{const n=t+Math.abs(t-r)/2;if(o>5)return n;if(H.every(a=>Math.abs(a-n)>=10))return H.push(n),n;const e=Math.abs(t-r);return q(t,r-e/5,o+1)},"findLane"),Zr=h((t,r,o,n)=>{var f,b,w,I,j;const e=k.get(r.id),a=k.get(o.id);if(e===void 0||a===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${o.id}`);const i=Xr(r,o,e,a,n);let c="",m="",y=0,$=0,l=(f=E.get(o.branch))==null?void 0:f.index;o.type===p.MERGE&&r.id!==o.parents[0]&&(l=(b=E.get(r.branch))==null?void 0:b.index);let d;if(i){c="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",y=10,$=10;const M=e.y<a.y?q(e.y,a.y):q(a.y,e.y),B=e.x<a.x?q(e.x,a.x):q(a.x,e.x);g==="TB"?e.x<a.x?d=`M ${e.x} ${e.y} L ${B-y} ${e.y} ${m} ${B} ${e.y+$} L ${B} ${a.y-y} ${c} ${B+$} ${a.y} L ${a.x} ${a.y}`:(l=(w=E.get(r.branch))==null?void 0:w.index,d=`M ${e.x} ${e.y} L ${B+y} ${e.y} ${c} ${B} ${e.y+$} L ${B} ${a.y-y} ${m} ${B-$} ${a.y} L ${a.x} ${a.y}`):g==="BT"?e.x<a.x?d=`M ${e.x} ${e.y} L ${B-y} ${e.y} ${c} ${B} ${e.y-$} L ${B} ${a.y+y} ${m} ${B+$} ${a.y} L ${a.x} ${a.y}`:(l=(I=E.get(r.branch))==null?void 0:I.index,d=`M ${e.x} ${e.y} L ${B+y} ${e.y} ${m} ${B} ${e.y-$} L ${B} ${a.y+y} ${c} ${B-$} ${a.y} L ${a.x} ${a.y}`):e.y<a.y?d=`M ${e.x} ${e.y} L ${e.x} ${M-y} ${c} ${e.x+$} ${M} L ${a.x-y} ${M} ${m} ${a.x} ${M+$} L ${a.x} ${a.y}`:(l=(j=E.get(r.branch))==null?void 0:j.index,d=`M ${e.x} ${e.y} L ${e.x} ${M+y} ${m} ${e.x+$} ${M} L ${a.x-y} ${M} ${c} ${a.x} ${M-$} L ${a.x} ${a.y}`)}else c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,g==="TB"?(e.x<a.x&&(o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${m} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x+y} ${e.y} ${c} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x===a.x&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):g==="BT"?(e.x<a.x&&(o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",y=20,$=20,o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${c} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x===a.x&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):(e.y<a.y&&(o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${a.y-y} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y>a.y&&(o.type===p.MERGE&&r.id!==o.parents[0]?d=`M ${e.x} ${e.y} L ${a.x-y} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`:d=`M ${e.x} ${e.y} L ${e.x} ${a.y+y} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y===a.y&&(d=`M ${e.x} ${e.y} L ${a.x} ${a.y}`));if(d===void 0)throw new Error("Line definition not found");t.append("path").attr("d",d).attr("class","arrow arrow"+l%A)},"drawArrow"),rt=h((t,r)=>{const o=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(n=>{const e=r.get(n);e.parents&&e.parents.length>0&&e.parents.forEach(a=>{Zr(o,r.get(a),e,r)})})},"drawArrows"),tt=h((t,r)=>{const o=t.append("g");r.forEach((n,e)=>{var f;const a=e%A,i=(f=E.get(n.name))==null?void 0:f.pos;if(i===void 0)throw new Error(`Position not found for branch ${n.name}`);const c=o.append("line");c.attr("x1",0),c.attr("y1",i),c.attr("x2",v),c.attr("y2",i),c.attr("class","branch branch"+a),g==="TB"?(c.attr("y1",z),c.attr("x1",i),c.attr("y2",v),c.attr("x2",i)):g==="BT"&&(c.attr("y1",v),c.attr("x1",i),c.attr("y2",z),c.attr("x2",i)),H.push(i);const m=n.name,y=V(m),$=o.insert("rect"),l=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);l.node().appendChild(y);const d=y.getBBox();$.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-((x==null?void 0:x.rotateCommitLabel)===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),l.attr("transform","translate("+(-d.width-14-((x==null?void 0:x.rotateCommitLabel)===!0?30:0))+", "+(i-d.height/2-1)+")"),g==="TB"?($.attr("x",i-d.width/2-10).attr("y",0),l.attr("transform","translate("+(i-d.width/2-5)+", 0)")):g==="BT"?($.attr("x",i-d.width/2-10).attr("y",v),l.attr("transform","translate("+(i-d.width/2-5)+", "+v+")")):$.attr("transform","translate(-19, "+(i-d.height/2)+")")})},"drawBranches"),et=h(function(t,r,o,n,e){return E.set(t,{pos:r,index:o}),r+=50+(e?40:0)+(g==="TB"||g==="BT"?n.width/2:0),r},"setBranchPosition"),ot=h(function(t,r,o,n){if(Sr(),u.debug("in gitgraph renderer",t+`
`,"id:",r,o),!x)throw new Error("GitGraph config not found");const e=x.rotateCommitLabel??!1,a=n.db;O=a.getCommits();const i=a.getBranchesAsObjArray();g=a.getDirection();const c=cr(`[id="${r}"]`);let m=0;i.forEach((y,$)=>{var I;const l=V(y.name),d=c.append("g"),f=d.insert("g").attr("class","branchLabel"),b=f.insert("g").attr("class","label branch-label");(I=b.node())==null||I.appendChild(l);const w=l.getBBox();m=et(y.name,m,$,w,e),b.remove(),f.remove(),d.remove()}),F(c,O,!1),x.showBranches&&tt(c,i),rt(c,O),F(c,O,!0),ir.insertTitle(c,"gitTitleText",x.titleTopMargin??0,a.getDiagramTitle()),sr(void 0,c,x.diagramPadding,x.useMaxWidth)},"draw"),at={draw:ot},nt=h(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),ct=nt,gt={parser:Hr,db:U,renderer:at,styles:ct};export{gt as diagram};
