import{i as X}from"./chunk-353BL4L5-8RL_rMKC-SL9_8R8Y.KRrwHKCA.js";import{e as Q}from"./chunk-AACKK3MU-sby0uGws-B0vysnSJ.CW9iLIKp.js";import{_ as h,H as Z,r as tt,P as et,d as rt,e as ot,q as st,u,f as nt,g as ct,W as at,G as it,z as dt,l as C,I as ht,J as mt,N as $t,K as lt}from"./theme.BB_k4Az6.js";import{I as gt}from"./treemap-75Q7IDZK-DXztvJ2e-BSUAwKiX.DKPR31WB.js";import"./framework.CBoQAKmm.js";import"./baseUniq-CNqCRbrC-BdcmcNSm.BU1mroIp.js";import"./basePickBy-CWYLlH2g-Ddz4xLdB.DYCO7ML1.js";import"./clone-BYhKjDMH-CJuBb9uG.Cjl_WD2T.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yt=$t.gitGraph,G=h(()=>ht({...yt,...mt().gitGraph}),"getConfig"),i=new Q(()=>{const e=G(),t=e.mainBranchName,o=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:o}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function S(){return lt({length:7})}h(S,"getID");function F(e,t){const o=Object.create(null);return e.reduce((n,r)=>{const s=t(r);return o[s]||(o[s]=!0,n.push(r)),n},[])}h(F,"uniqBy");var pt=h(function(e){i.records.direction=e},"setDirection"),ft=h(function(e){u.debug("options str",e),e=e==null?void 0:e.trim(),e=e||"{}";try{i.records.options=JSON.parse(e)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),xt=h(function(){return i.records.options},"getOptions"),ut=h(function(e){let t=e.msg,o=e.id;const n=e.type;let r=e.tags;u.info("commit",t,o,n,r),u.debug("Entering commit:",t,o,n,r);const s=G();o=C.sanitizeText(o,s),t=C.sanitizeText(t,s),r=r==null?void 0:r.map(c=>C.sanitizeText(c,s));const a={id:o||i.records.seq+"-"+S(),message:t,seq:i.records.seq++,type:n??p.NORMAL,tags:r??[],parents:i.records.head==null?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=a,u.info("main branch",s.mainBranchName),i.records.commits.has(a.id)&&u.warn(`Commit ID ${a.id} already exists`),i.records.commits.set(a.id,a),i.records.branches.set(i.records.currBranch,a.id),u.debug("in pushCommit "+a.id)},"commit"),bt=h(function(e){let t=e.name;const o=e.order;if(t=C.sanitizeText(t,G()),i.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);i.records.branches.set(t,i.records.head!=null?i.records.head.id:null),i.records.branchConfig.set(t,{name:t,order:o}),K(t),u.debug("in createBranch")},"branch"),wt=h(e=>{let t=e.branch,o=e.id;const n=e.type,r=e.tags,s=G();t=C.sanitizeText(t,s),o&&(o=C.sanitizeText(o,s));const a=i.records.branches.get(i.records.currBranch),c=i.records.branches.get(t),m=a?i.records.commits.get(a):void 0,l=c?i.records.commits.get(c):void 0;if(m&&l&&m.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(i.records.currBranch===t){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(m===void 0||!m){const d=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},d}if(!i.records.branches.has(t)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},d}if(l===void 0||!l){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},d}if(m===l){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(o&&i.records.commits.has(o)){const d=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw d.hash={text:`merge ${t} ${o} ${n} ${r==null?void 0:r.join(" ")}`,token:`merge ${t} ${o} ${n} ${r==null?void 0:r.join(" ")}`,expected:[`merge ${t} ${o}_UNIQUE ${n} ${r==null?void 0:r.join(" ")}`]},d}const $=c||"",g={id:o||`${i.records.seq}-${S()}`,message:`merged branch ${t} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,$],branch:i.records.currBranch,type:p.MERGE,customType:n,customId:!!o,tags:r??[]};i.records.head=g,i.records.commits.set(g.id,g),i.records.branches.set(i.records.currBranch,g.id),u.debug(i.records.branches),u.debug("in mergeBranch")},"merge"),Et=h(function(e){let t=e.id,o=e.targetId,n=e.tags,r=e.parent;u.debug("Entering cherryPick:",t,o,n);const s=G();if(t=C.sanitizeText(t,s),o=C.sanitizeText(o,s),n=n==null?void 0:n.map(m=>C.sanitizeText(m,s)),r=C.sanitizeText(r,s),!t||!i.records.commits.has(t)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},m}const a=i.records.commits.get(t);if(a===void 0||!a)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(r&&!(Array.isArray(a.parents)&&a.parents.includes(r)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=a.branch;if(a.type===p.MERGE&&!r)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!i.records.commits.has(o)){if(c===i.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const m=i.records.branches.get(i.records.currBranch);if(m===void 0||!m){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const l=i.records.commits.get(m);if(l===void 0||!l){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const $={id:i.records.seq+"-"+S(),message:`cherry-picked ${a==null?void 0:a.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,a.id],branch:i.records.currBranch,type:p.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${a.id}${a.type===p.MERGE?`|parent:${r}`:""}`]};i.records.head=$,i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),u.debug(i.records.branches),u.debug("in cherryPick")}},"cherryPick"),K=h(function(e){if(e=C.sanitizeText(e,G()),i.records.branches.has(e)){i.records.currBranch=e;const t=i.records.branches.get(i.records.currBranch);t===void 0||!t?i.records.head=null:i.records.head=i.records.commits.get(t)??null}else{const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},"checkout");function W(e,t,o){const n=e.indexOf(t);n===-1?e.push(o):e.splice(n,1,o)}h(W,"upsert");function D(e){const t=e.reduce((r,s)=>r.seq>s.seq?r:s,e[0]);let o="";e.forEach(function(r){r===t?o+="	*":o+="	|"});const n=[o,t.id,t.seq];for(const r in i.records.branches)i.records.branches.get(r)===t.id&&n.push(r);if(u.debug(n.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){const r=i.records.commits.get(t.parents[0]);W(e,t,r),t.parents[1]&&e.push(i.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){const r=i.records.commits.get(t.parents[0]);W(e,t,r)}}e=F(e,r=>r.id),D(e)}h(D,"prettyPrintCommitHistory");var Bt=h(function(){u.debug(i.records.commits);const e=Y()[0];D([e])},"prettyPrint"),kt=h(function(){i.reset(),dt()},"clear"),Ct=h(function(){return[...i.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),Lt=h(function(){return i.records.branches},"getBranches"),Tt=h(function(){return i.records.commits},"getCommits"),Y=h(function(){const e=[...i.records.commits.values()];return e.forEach(function(t){u.debug(t.id)}),e.sort((t,o)=>t.seq-o.seq),e},"getCommitsArray"),Mt=h(function(){return i.records.currBranch},"getCurrentBranch"),vt=h(function(){return i.records.direction},"getDirection"),Rt=h(function(){return i.records.head},"getHead"),V={commitType:p,getConfig:G,setDirection:pt,setOptions:ft,getOptions:xt,commit:ut,branch:bt,merge:wt,cherryPick:Et,checkout:K,prettyPrint:Bt,clear:kt,getBranchesAsObjArray:Ct,getBranches:Lt,getCommits:Tt,getCommitsArray:Y,getCurrentBranch:Mt,getDirection:vt,getHead:Rt,setAccTitle:st,getAccTitle:ot,getAccDescription:rt,setAccDescription:et,setDiagramTitle:tt,getDiagramTitle:Z},Pt=h((e,t)=>{X(e,t),e.dir&&t.setDirection(e.dir);for(const o of e.statements)It(o,t)},"populate"),It=h((e,t)=>{const o={Commit:h(n=>t.commit(At(n)),"Commit"),Branch:h(n=>t.branch(Gt(n)),"Branch"),Merge:h(n=>t.merge(Ot(n)),"Merge"),Checkout:h(n=>t.checkout(qt(n)),"Checkout"),CherryPicking:h(n=>t.cherryPick(Ht(n)),"CherryPicking")}[e.$type];o?o(e):u.error(`Unknown statement type: ${e.$type}`)},"parseStatement"),At=h(e=>({id:e.id,msg:e.message??"",type:e.type!==void 0?p[e.type]:p.NORMAL,tags:e.tags??void 0}),"parseCommit"),Gt=h(e=>({name:e.name,order:e.order??0}),"parseBranch"),Ot=h(e=>({branch:e.branch,id:e.id??"",type:e.type!==void 0?p[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),qt=h(e=>e.branch,"parseCheckout"),Ht=h(e=>{var t;return{id:e.id,targetId:"",tags:((t=e.tags)==null?void 0:t.length)===0?void 0:e.tags,parent:e.parent}},"parseCherryPicking"),zt={parse:h(async e=>{const t=await gt("gitGraph",e);u.debug(t),Pt(t,V)},"parse")},N=nt(),x=N==null?void 0:N.gitGraph,R=10,P=40,L=4,T=2,A=8,B=new Map,k=new Map,H=30,O=new Map,z=[],v=0,y="LR",St=h(()=>{B.clear(),k.clear(),O.clear(),v=0,z=[],y="LR"},"clear"),U=h(e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof e=="string"?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),t.appendChild(n)}),t},"drawText"),J=h(e=>{let t,o,n;return y==="BT"?(o=h((r,s)=>r<=s,"comparisonFunc"),n=1/0):(o=h((r,s)=>r>=s,"comparisonFunc"),n=0),e.forEach(r=>{var a,c;const s=y==="TB"||y=="BT"?(a=k.get(r))==null?void 0:a.y:(c=k.get(r))==null?void 0:c.x;s!==void 0&&o(s,n)&&(t=r,n=s)}),t},"findClosestParent"),Nt=h(e=>{let t="",o=1/0;return e.forEach(n=>{const r=k.get(n).y;r<=o&&(t=n,o=r)}),t||void 0},"findClosestParentBT"),Wt=h((e,t,o)=>{let n=o,r=o;const s=[];e.forEach(a=>{const c=t.get(a);if(!c)throw new Error(`Commit not found for key ${a}`);c.parents.length?(n=jt(c),r=Math.max(n,r)):s.push(c),_t(c,n)}),n=r,s.forEach(a=>{Ft(a,n,o)}),e.forEach(a=>{const c=t.get(a);if(c!=null&&c.parents.length){const m=Nt(c.parents);n=k.get(m).y-P,n<=r&&(r=n);const l=B.get(c.branch).pos,$=n-R;k.set(c.id,{x:l,y:$})}})},"setParallelBTPos"),Dt=h(e=>{var n;const t=J(e.parents.filter(r=>r!==null));if(!t)throw new Error(`Closest parent not found for commit ${e.id}`);const o=(n=k.get(t))==null?void 0:n.y;if(o===void 0)throw new Error(`Closest parent position not found for commit ${e.id}`);return o},"findClosestParentPos"),jt=h(e=>Dt(e)+P,"calculateCommitPosition"),_t=h((e,t)=>{const o=B.get(e.branch);if(!o)throw new Error(`Branch not found for commit ${e.id}`);const n=o.pos,r=t+R;return k.set(e.id,{x:n,y:r}),{x:n,y:r}},"setCommitPosition"),Ft=h((e,t,o)=>{const n=B.get(e.branch);if(!n)throw new Error(`Branch not found for commit ${e.id}`);const r=t+o,s=n.pos;k.set(e.id,{x:s,y:r})},"setRootPosition"),Kt=h((e,t,o,n,r,s)=>{if(s===p.HIGHLIGHT)e.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${r%A} ${n}-outer`),e.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${r%A} ${n}-inner`);else if(s===p.CHERRY_PICK)e.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class",`commit ${t.id} ${n}`),e.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),e.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),e.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`),e.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`);else{const a=e.append("circle");if(a.attr("cx",o.x),a.attr("cy",o.y),a.attr("r",t.type===p.MERGE?9:10),a.attr("class",`commit ${t.id} commit${r%A}`),s===p.MERGE){const c=e.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class",`commit ${n} ${t.id} commit${r%A}`)}s===p.REVERSE&&e.append("path").attr("d",`M ${o.x-5},${o.y-5}L${o.x+5},${o.y+5}M${o.x-5},${o.y+5}L${o.x+5},${o.y-5}`).attr("class",`commit ${n} ${t.id} commit${r%A}`)}},"drawCommitBullet"),Yt=h((e,t,o,n)=>{var r;if(t.type!==p.CHERRY_PICK&&(t.customId&&t.type===p.MERGE||t.type!==p.MERGE)&&(x!=null&&x.showCommitLabel)){const s=e.append("g"),a=s.insert("rect").attr("class","commit-label-bkg"),c=s.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(t.id),m=(r=c.node())==null?void 0:r.getBBox();if(m&&(a.attr("x",o.posWithOffset-m.width/2-T).attr("y",o.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),y==="TB"||y==="BT"?(a.attr("x",o.x-(m.width+4*L+5)).attr("y",o.y-12),c.attr("x",o.x-(m.width+4*L)).attr("y",o.y+m.height-12)):c.attr("x",o.posWithOffset-m.width/2),x.rotateCommitLabel))if(y==="TB"||y==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),a.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const l=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;s.attr("transform","translate("+l+", "+$+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),Vt=h((e,t,o,n)=>{var r;if(t.tags.length>0){let s=0,a=0,c=0;const m=[];for(const l of t.tags.reverse()){const $=e.insert("polygon"),g=e.append("circle"),d=e.append("text").attr("y",o.y-16-s).attr("class","tag-label").text(l),f=(r=d.node())==null?void 0:r.getBBox();if(!f)throw new Error("Tag bbox not found");a=Math.max(a,f.width),c=Math.max(c,f.height),d.attr("x",o.posWithOffset-f.width/2),m.push({tag:d,hole:g,rect:$,yOffset:s}),s+=20}for(const{tag:l,hole:$,rect:g,yOffset:d}of m){const f=c/2,b=o.y-19.2-d;if(g.attr("class","tag-label-bkg").attr("points",`
      ${n-a/2-L/2},${b+T}  
      ${n-a/2-L/2},${b-T}
      ${o.posWithOffset-a/2-L},${b-f-T}
      ${o.posWithOffset+a/2+L},${b-f-T}
      ${o.posWithOffset+a/2+L},${b+f+T}
      ${o.posWithOffset-a/2-L},${b+f+T}`),$.attr("cy",b).attr("cx",n-a/2+L/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const w=n+d;g.attr("class","tag-label-bkg").attr("points",`
        ${o.x},${w+2}
        ${o.x},${w-2}
        ${o.x+R},${w-f-2}
        ${o.x+R+a+4},${w-f-2}
        ${o.x+R+a+4},${w+f+2}
        ${o.x+R},${w+f+2}`).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("cx",o.x+L/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),l.attr("x",o.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),Ut=h(e=>{switch(e.customType??e.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Jt=h((e,t,o,n)=>{const r={x:0,y:0};if(e.parents.length>0){const s=J(e.parents);if(s){const a=n.get(s)??r;return t==="TB"?a.y+P:t==="BT"?(n.get(e.id)??r).y-P:a.x+P}}else return t==="TB"?H:t==="BT"?(n.get(e.id)??r).y-P:0;return 0},"calculatePosition"),Xt=h((e,t,o)=>{var a,c;const n=y==="BT"&&o?t:t+R,r=y==="TB"||y==="BT"?n:(a=B.get(e.branch))==null?void 0:a.pos,s=y==="TB"||y==="BT"?(c=B.get(e.branch))==null?void 0:c.pos:n;if(s===void 0||r===void 0)throw new Error(`Position were undefined for commit ${e.id}`);return{x:s,y:r,posWithOffset:n}},"getCommitPosition"),_=h((e,t,o)=>{if(!x)throw new Error("GitGraph config not found");const n=e.append("g").attr("class","commit-bullets"),r=e.append("g").attr("class","commit-labels");let s=y==="TB"||y==="BT"?H:0;const a=[...t.keys()],c=(x==null?void 0:x.parallelCommits)??!1,m=h(($,g)=>{var b,w;const d=(b=t.get($))==null?void 0:b.seq,f=(w=t.get(g))==null?void 0:w.seq;return d!==void 0&&f!==void 0?d-f:0},"sortKeys");let l=a.sort(m);y==="BT"&&(c&&Wt(l,t,s),l=l.reverse()),l.forEach($=>{var f;const g=t.get($);if(!g)throw new Error(`Commit not found for key ${$}`);c&&(s=Jt(g,y,s,k));const d=Xt(g,s,c);if(o){const b=Ut(g),w=g.customType??g.type,I=((f=B.get(g.branch))==null?void 0:f.index)??0;Kt(n,g,d,b,I,w),Yt(r,g,d,s),Vt(r,g,d,s)}y==="TB"||y==="BT"?k.set(g.id,{x:d.x,y:d.posWithOffset}):k.set(g.id,{x:d.posWithOffset,y:d.y}),s=y==="BT"&&c?s+P:s+P+R,s>v&&(v=s)})},"drawCommits"),Qt=h((e,t,o,n,r)=>{const s=(y==="TB"||y==="BT"?o.x<n.x:o.y<n.y)?t.branch:e.branch,a=h(m=>m.branch===s,"isOnBranchToGetCurve"),c=h(m=>m.seq>e.seq&&m.seq<t.seq,"isBetweenCommits");return[...r.values()].some(m=>c(m)&&a(m))},"shouldRerouteArrow"),q=h((e,t,o=0)=>{const n=e+Math.abs(e-t)/2;if(o>5)return n;if(z.every(s=>Math.abs(s-n)>=10))return z.push(n),n;const r=Math.abs(e-t);return q(e,t-r/5,o+1)},"findLane"),Zt=h((e,t,o,n)=>{var f,b,w,I,j;const r=k.get(t.id),s=k.get(o.id);if(r===void 0||s===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${o.id}`);const a=Qt(t,o,r,s,n);let c="",m="",l=0,$=0,g=(f=B.get(o.branch))==null?void 0:f.index;o.type===p.MERGE&&t.id!==o.parents[0]&&(g=(b=B.get(t.branch))==null?void 0:b.index);let d;if(a){c="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",l=10,$=10;const M=r.y<s.y?q(r.y,s.y):q(s.y,r.y),E=r.x<s.x?q(r.x,s.x):q(s.x,r.x);y==="TB"?r.x<s.x?d=`M ${r.x} ${r.y} L ${E-l} ${r.y} ${m} ${E} ${r.y+$} L ${E} ${s.y-l} ${c} ${E+$} ${s.y} L ${s.x} ${s.y}`:(g=(w=B.get(t.branch))==null?void 0:w.index,d=`M ${r.x} ${r.y} L ${E+l} ${r.y} ${c} ${E} ${r.y+$} L ${E} ${s.y-l} ${m} ${E-$} ${s.y} L ${s.x} ${s.y}`):y==="BT"?r.x<s.x?d=`M ${r.x} ${r.y} L ${E-l} ${r.y} ${c} ${E} ${r.y-$} L ${E} ${s.y+l} ${m} ${E+$} ${s.y} L ${s.x} ${s.y}`:(g=(I=B.get(t.branch))==null?void 0:I.index,d=`M ${r.x} ${r.y} L ${E+l} ${r.y} ${m} ${E} ${r.y-$} L ${E} ${s.y+l} ${c} ${E-$} ${s.y} L ${s.x} ${s.y}`):r.y<s.y?d=`M ${r.x} ${r.y} L ${r.x} ${M-l} ${c} ${r.x+$} ${M} L ${s.x-l} ${M} ${m} ${s.x} ${M+$} L ${s.x} ${s.y}`:(g=(j=B.get(t.branch))==null?void 0:j.index,d=`M ${r.x} ${r.y} L ${r.x} ${M+l} ${m} ${r.x+$} ${M} L ${s.x-l} ${M} ${c} ${s.x} ${M-$} L ${s.x} ${s.y}`)}else c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,y==="TB"?(r.x<s.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${s.y-l} ${c} ${r.x+$} ${s.y} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${s.x-l} ${r.y} ${m} ${s.x} ${r.y+$} L ${s.x} ${s.y}`),r.x>s.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${s.y-l} ${m} ${r.x-$} ${s.y} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${s.x+l} ${r.y} ${c} ${s.x} ${r.y+$} L ${s.x} ${s.y}`),r.x===s.x&&(d=`M ${r.x} ${r.y} L ${s.x} ${s.y}`)):y==="BT"?(r.x<s.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${s.y+l} ${m} ${r.x+$} ${s.y} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${s.x-l} ${r.y} ${c} ${s.x} ${r.y-$} L ${s.x} ${s.y}`),r.x>s.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${s.y+l} ${c} ${r.x-$} ${s.y} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${s.x-l} ${r.y} ${c} ${s.x} ${r.y-$} L ${s.x} ${s.y}`),r.x===s.x&&(d=`M ${r.x} ${r.y} L ${s.x} ${s.y}`)):(r.y<s.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${s.x-l} ${r.y} ${m} ${s.x} ${r.y+$} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${r.x} ${s.y-l} ${c} ${r.x+$} ${s.y} L ${s.x} ${s.y}`),r.y>s.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${s.x-l} ${r.y} ${c} ${s.x} ${r.y-$} L ${s.x} ${s.y}`:d=`M ${r.x} ${r.y} L ${r.x} ${s.y+l} ${m} ${r.x+$} ${s.y} L ${s.x} ${s.y}`),r.y===s.y&&(d=`M ${r.x} ${r.y} L ${s.x} ${s.y}`));if(d===void 0)throw new Error("Line definition not found");e.append("path").attr("d",d).attr("class","arrow arrow"+g%A)},"drawArrow"),te=h((e,t)=>{const o=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(n=>{const r=t.get(n);r.parents&&r.parents.length>0&&r.parents.forEach(s=>{Zt(o,t.get(s),r,t)})})},"drawArrows"),ee=h((e,t)=>{const o=e.append("g");t.forEach((n,r)=>{var f;const s=r%A,a=(f=B.get(n.name))==null?void 0:f.pos;if(a===void 0)throw new Error(`Position not found for branch ${n.name}`);const c=o.append("line");c.attr("x1",0),c.attr("y1",a),c.attr("x2",v),c.attr("y2",a),c.attr("class","branch branch"+s),y==="TB"?(c.attr("y1",H),c.attr("x1",a),c.attr("y2",v),c.attr("x2",a)):y==="BT"&&(c.attr("y1",v),c.attr("x1",a),c.attr("y2",H),c.attr("x2",a)),z.push(a);const m=n.name,l=U(m),$=o.insert("rect"),g=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+s);g.node().appendChild(l);const d=l.getBBox();$.attr("class","branchLabelBkg label"+s).attr("rx",4).attr("ry",4).attr("x",-d.width-4-((x==null?void 0:x.rotateCommitLabel)===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),g.attr("transform","translate("+(-d.width-14-((x==null?void 0:x.rotateCommitLabel)===!0?30:0))+", "+(a-d.height/2-1)+")"),y==="TB"?($.attr("x",a-d.width/2-10).attr("y",0),g.attr("transform","translate("+(a-d.width/2-5)+", 0)")):y==="BT"?($.attr("x",a-d.width/2-10).attr("y",v),g.attr("transform","translate("+(a-d.width/2-5)+", "+v+")")):$.attr("transform","translate(-19, "+(a-d.height/2)+")")})},"drawBranches"),re=h(function(e,t,o,n,r){return B.set(e,{pos:t,index:o}),t+=50+(r?40:0)+(y==="TB"||y==="BT"?n.width/2:0),t},"setBranchPosition"),oe=h(function(e,t,o,n){if(St(),u.debug("in gitgraph renderer",e+`
`,"id:",t,o),!x)throw new Error("GitGraph config not found");const r=x.rotateCommitLabel??!1,s=n.db;O=s.getCommits();const a=s.getBranchesAsObjArray();y=s.getDirection();const c=ct(`[id="${t}"]`);let m=0;a.forEach((l,$)=>{var I;const g=U(l.name),d=c.append("g"),f=d.insert("g").attr("class","branchLabel"),b=f.insert("g").attr("class","label branch-label");(I=b.node())==null||I.appendChild(g);const w=g.getBBox();m=re(l.name,m,$,w,r),b.remove(),f.remove(),d.remove()}),_(c,O,!1),x.showBranches&&ee(c,a),te(c,O),_(c,O,!0),at.insertTitle(c,"gitTitleText",x.titleTopMargin??0,s.getDiagramTitle()),it(void 0,c,x.diagramPadding,x.useMaxWidth)},"draw"),se={draw:oe},ne=h(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles"),ce=ne,ye={parser:zt,db:V,renderer:se,styles:ce};export{ye as diagram};
